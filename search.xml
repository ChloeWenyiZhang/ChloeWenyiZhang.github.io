<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【KDD&#39;19】AlphaStock: 一种使用可解释的深度强化注意力网络的买入赢家和卖出输家的投资策略</title>
      <link href="/2024/04/20/%E3%80%90KDD-19%E3%80%91AlphaStock-%E4%B8%80%E7%A7%8D%E4%BD%BF%E7%94%A8%E5%8F%AF%E8%A7%A3%E9%87%8A%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%BD%91%E7%BB%9C%E7%9A%84%E4%B9%B0%E5%85%A5%E8%B5%A2%E5%AE%B6%E5%92%8C%E5%8D%96%E5%87%BA%E8%BE%93%E5%AE%B6%E7%9A%84%E6%8A%95%E8%B5%84%E7%AD%96%E7%95%A5/"/>
      <url>/2024/04/20/%E3%80%90KDD-19%E3%80%91AlphaStock-%E4%B8%80%E7%A7%8D%E4%BD%BF%E7%94%A8%E5%8F%AF%E8%A7%A3%E9%87%8A%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%BC%BA%E5%8C%96%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%BD%91%E7%BB%9C%E7%9A%84%E4%B9%B0%E5%85%A5%E8%B5%A2%E5%AE%B6%E5%92%8C%E5%8D%96%E5%87%BA%E8%BE%93%E5%AE%B6%E7%9A%84%E6%8A%95%E8%B5%84%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Title-AlphaStock-A-Buying-Winners-and-Selling-Losers-Investment-Strategy-using-Interpretable-Deep-Reinforcement-Attention-Networks"><a href="#Title-AlphaStock-A-Buying-Winners-and-Selling-Losers-Investment-Strategy-using-Interpretable-Deep-Reinforcement-Attention-Networks" class="headerlink" title="Title: AlphaStock: A Buying-Winners-and-Selling-Losers Investment Strategy using Interpretable Deep Reinforcement Attention Networks"></a>Title: AlphaStock: A Buying-Winners-and-Selling-Losers Investment Strategy using Interpretable Deep Reinforcement Attention Networks</h2><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>这篇论文所提出的AlphaStock，是一种基于强化学习的投资策略，利用可解释的深度注意力网络进行增强。主要贡献如下：</p><ol><li>结合深度注意力网络和基于夏普比率的强化学习，以平衡收益和风险；</li><li>对资产之间的相互关系进行建模，以避免选择偏差，并采用跨资产的注意力机制；</li><li>（可能是）最早使用深度强化学习，并提供解释性的投资策略；<br>工作在美国和中国的长期股票市场中进行了实验，证明其在不同市场状态下的有效性和鲁棒性。<br>实验表明该方法倾向于选择长期价值增长、近期被低估的股票。</li></ol><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>将深度学习应用于金融市场一直以来所面临的几个挑战：</p><ul><li>平衡回报和风险：大多数监督式的深度学习模型专注于没有风险的价格预测，有些基于RL的策略考虑了风险，但如何将最先进的深度学习方法应用于风险回报平衡的RL框架，还没有得到很好的研究；</li><li>对资产之间的关系进行建模：市场上的许多金融工具可用于从资产之间的相互关系中获取考虑了风险因素的收益，例如对冲、套利、和BWSL策略，然而现有的基于DL&#x2F;RL的投资策略很少关注这些；</li><li>解读投资策略：如何从DL的策略中提取可解释的规则。</li></ul><p>论文所提出的AlphaStock，使用深度注意力网络和强化学习以克服以上困难，包含以下三个部分：</p><ol><li>LSTM with History state Attention (LSTM-HA) network，用于从多个时间序列中获取资产的表示；</li><li>构建了跨资产的attention网络（<strong>CAAN</strong>），对资产之间的相互关系、资产价格的上涨进行建模；</li><li>投资组合生成器，根据<strong>attention网络</strong>输出的赢家分数，给出每个资产的投资比例。<br>模型使用RL进行优化，最大化夏普比率以平衡回报和风险。<br>为了进一步获得模型的可解释性，论文还提出一种敏感性分析法，来揭示模型如何根据资产的多个特征进行资产投资。</li></ol><h3 id="BWSL策略"><a href="#BWSL策略" class="headerlink" title="BWSL策略"></a>BWSL策略</h3><p>论文采用了BWSL策略进行股票交易，简单来说即：买入价格上涨率高的资产（赢家）并卖出价格下跌率高的资产（输家）的交易规则。<br>论文将该策略作为零投资的投资组合动作进行执行，确保投资组合中赢家的平均价格上涨率高于输家。</p><h3 id="AlphaStock模型"><a href="#AlphaStock模型" class="headerlink" title="AlphaStock模型"></a>AlphaStock模型</h3><p>AlphaStock的模型架构由三个部分组成：<br><strong>1. LSTM with History state Attention (LSTM-HA)网络</strong>：用于从股票的历史状态中提取股票表示；<br><strong>2. 跨资产的注意力网络（CAAN）：描述股票之间的相互关系</strong>，并计算每只股票的赢家分数；<br><strong>3. 投资组合生成器</strong>：根据赢家分数生成投资组合。<br><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240420150023.png" alt="The framework of the AlphaStock model"></p><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><p>论文在美国和中国的长期市场中进行了实验，评估了AlphaStock模型的性能。实验结果表明，在不同市场状态下，AlphaStock模型都能取得有效和鲁棒的表现。</p><h3 id="美国股市的表现"><a href="#美国股市的表现" class="headerlink" title="美国股市的表现"></a>美国股市的表现</h3><p>实验结果显示，AlphaStock模型在累计收益、年化收益率、夏普比率等方面表现优异，显著优于基线方法。<br><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240420150639.png" alt="Performance in U.S. Markets"></p><h3 id="中国股市的表现"><a href="#中国股市的表现" class="headerlink" title="中国股市的表现"></a>中国股市的表现</h3><p>在中国股市实验中，AlphaStock模型同样表现出色，进一步验证了其在不同市场的有效性和鲁棒性。<br><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240420150901.png" alt="Performance comparison on Chinese markets"></p><h3 id="投资策略解释"><a href="#投资策略解释" class="headerlink" title="投资策略解释"></a>投资策略解释</h3><p>论文使用敏感性分析方法解释了AlphaStock模型的投资策略。分析结果显示，股票的交易特征对赢家分数产生了重要影响，这有助于理解模型的决策过程。<br><img src="/../images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240420150834.png" alt="Influence of history trading features to winner scores"></p><h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>论文提出了AlphaStock，一种基于强化学习和深度注意力网络的买入赢家和卖出输家的投资策略。实验证明，AlphaStock模型在不同市场状态下具有有效性和鲁棒性，为投资者提供了一种可靠的投资工具。</p><p><a href="https://dl.acm.org/doi/abs/10.1145/3292500.3330647">论文链接</a></p><p>欢迎阅读并提出任何问题或建议！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 论文阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub Pages 博客作业报告</title>
      <link href="/2024/04/20/Hexo-GitHub-Pages-%E5%8D%9A%E5%AE%A2%E4%BD%9C%E4%B8%9A%E6%8A%A5%E5%91%8A/"/>
      <url>/2024/04/20/Hexo-GitHub-Pages-%E5%8D%9A%E5%AE%A2%E4%BD%9C%E4%B8%9A%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="作业内容"><a href="#作业内容" class="headerlink" title="作业内容"></a>作业内容</h2><p>基于Hexo和Github Pages搭建了一个静态的个人blog，用于分享我的论文阅读和实验报告等。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="Git-和-Github-SSH-key"><a href="#Git-和-Github-SSH-key" class="headerlink" title="Git 和 Github SSH key"></a>Git 和 Github SSH key</h3><p>安装成功后，需要将Git与GitHub账户进行绑定，在Git Bash中设置用户信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;github 用户名&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;github 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后生成ssh密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;github 注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>找到生成的id_rsa.pub文件，复制其中密钥至<a href="https://github.com/settings/keys">GitHub-settings-keys</a>新建一个SSH key即可。</p><h3 id="Node-Js"><a href="#Node-Js" class="headerlink" title="Node.Js"></a>Node.Js</h3><p>Windows直接在<a href="https://nodejs.org/en/">Node.Js官网</a>下载即可。<br>下载完成后可在终端输入以下命令查看node和npm是否成功安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm -v</span></span><br></pre></td></tr></table></figure><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>新建一个路径用于存放blog文件，在Git Bash中cd到该路径下，使用npm命令安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-cli -g</span><br></pre></td></tr></table></figure><p>初始化hexo并安装必备组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init .</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>新建一个public仓库，仓库名为：_”Github用户名”.github.io_ （必须以此为用户名，否则后续GitHub Pages的url会出现问题），在仓库设置中的_”Pages”<em>部分选择</em>‘master’_分支作为source。<br>GitHub Pages 配置保存后，个人主页的网站将会自动发布到 https:&#x2F;&#x2F;“GitHub用户名”.github.io，并且可以在仓库的设置页面中的 “GitHub Pages” 部分查看网页更新情况。</p><h3 id="部署至GitHub"><a href="#部署至GitHub" class="headerlink" title="部署至GitHub"></a>部署至GitHub</h3><p>修改blog目录中的站点配置文件_config.yml_，加入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repo-url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>完成后通过以下命令即可将本地内容推送至Github repository中，并可在浏览器中访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --deploy</span><br></pre></td></tr></table></figure><h3 id="写blog"><a href="#写blog" class="headerlink" title="写blog"></a>写blog</h3><p>通过如下命令在_blog&#x2F;source&#x2F;_posts_路径下生成新的Markdown文件，修改.md文件并推送至GitHub repository后，即可在网页中查看博客内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="string">&quot;title&quot;</span></span><br></pre></td></tr></table></figure><h2 id="我的blog页面布局-设计思路"><a href="#我的blog页面布局-设计思路" class="headerlink" title="我的blog页面布局 &amp; 设计思路"></a>我的blog页面布局 &amp; 设计思路</h2><h2 id="功能完善"><a href="#功能完善" class="headerlink" title="功能完善"></a>功能完善</h2><p>本页面所添加功能包括：日夜模式、全文搜索、文章分享等等。</p><h3 id="全文搜索（search）功能"><a href="#全文搜索（search）功能" class="headerlink" title="全文搜索（search）功能"></a>全文搜索（search）功能</h3><p>安装插件<a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a>实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>修改blog目录中的站点配置文件_config.yml_，加入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span> <span class="comment"># optional</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># optional eg ./images/loading.gif</span></span><br><span class="line">  <span class="attr">isSPA:</span> <span class="literal">false</span> <span class="comment"># optional</span></span><br></pre></td></tr></table></figure><h2 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h2><h3 id="选取Hexo作为博客主题的原因："><a href="#选取Hexo作为博客主题的原因：" class="headerlink" title="选取Hexo作为博客主题的原因："></a>选取Hexo作为博客主题的原因：</h3><p>-<strong>简单易用</strong>：使用Markdown语法编写内容，学习简单，快速上手。<br>-<strong>自动化部署</strong>：支持自动化部署到各种平台（如GitHub Pages、Netlify等），可以通过简单的命令实现内容更新的快速部署。<br>-<strong>丰富的主题和插件</strong>：提供了大量的主题和插件，可以根据需求定制网站风格和功能。<br>-<strong>生态系统健全</strong>：Hexo是一个成熟的静态网站生成器，拥有活跃的社区和丰富的文档，解决问题和获取支持相对容易。</p><h3 id="搭建过程中遇到的问题和解决方法"><a href="#搭建过程中遇到的问题和解决方法" class="headerlink" title="搭建过程中遇到的问题和解决方法"></a>搭建过程中遇到的问题和解决方法</h3><h4 id="1-Hexo无法正确识别Git插件"><a href="#1-Hexo无法正确识别Git插件" class="headerlink" title="1. Hexo无法正确识别Git插件"></a>1. Hexo无法正确识别Git插件</h4><p><strong>解决方法</strong>：安装hexo-deployer-git 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="2-无法访问Git仓库"><a href="#2-无法访问Git仓库" class="headerlink" title="2. 无法访问Git仓库"></a>2. 无法访问Git仓库</h4><p><strong>错误原因</strong>：本地 Git 配置的证书错误或过期<br><strong>解决方法</strong>：更新Git证书或重新安装Git，并检查Git配置，确保证书路径正确配置，也可以通过如下命令手动设置证书路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.sslCAInfo /path/to/certificate.crt</span><br></pre></td></tr></table></figure><h4 id="3-部署过程中身份验证失败"><a href="#3-部署过程中身份验证失败" class="headerlink" title="3. 部署过程中身份验证失败"></a>3. 部署过程中身份验证失败</h4><p><strong>错误原因</strong>：GitHub 在 2021 年 8 月 13 日移除了对密码验证的支持，因此需要使用其他的身份验证方式来进行部署。<br><strong>解决方法</strong>：配置好Git仓库的SSH密钥后，在Hexo的本地配置文件_config.yml_中使用git URL，而非HTTPS URL，可无需身份信息验证。</p><h4 id="4-Hexo成功部署到Git仓库，但访问网页显示404（no-GitHub-Pages）"><a href="#4-Hexo成功部署到Git仓库，但访问网页显示404（no-GitHub-Pages）" class="headerlink" title="4. Hexo成功部署到Git仓库，但访问网页显示404（no GitHub Pages）"></a>4. Hexo成功部署到Git仓库，但访问网页显示404（no GitHub Pages）</h4><p><strong>错误原因</strong>：仓库名和GitHub用户名不一致，导致GitHub Pages 默认会使用用户名作为子域名，然后将仓库名称添加到域名后面。<br><strong>解决方法</strong>：修改仓库名为用户名，避免生成域名时的不一致。</p><h3 id="博客页面布局-设计思路"><a href="#博客页面布局-设计思路" class="headerlink" title="博客页面布局 &amp; 设计思路"></a>博客页面布局 &amp; 设计思路</h3>]]></content>
      
      
      
        <tags>
            
            <tag> report </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
